// Generated by view binder compiler. Do not edit!
package com.lab.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.lab.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout aditionalLinear;

  @NonNull
  public final LinearLayout mealLinear;

  @NonNull
  public final LinearLayout profLinear;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final RecyclerView recyclerView2;

  @NonNull
  public final ImageView startzone;

  @NonNull
  public final ConstraintLayout tiptop;

  private FragmentHomeBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout aditionalLinear, @NonNull LinearLayout mealLinear,
      @NonNull LinearLayout profLinear, @NonNull RecyclerView recyclerView,
      @NonNull RecyclerView recyclerView2, @NonNull ImageView startzone,
      @NonNull ConstraintLayout tiptop) {
    this.rootView = rootView;
    this.aditionalLinear = aditionalLinear;
    this.mealLinear = mealLinear;
    this.profLinear = profLinear;
    this.recyclerView = recyclerView;
    this.recyclerView2 = recyclerView2;
    this.startzone = startzone;
    this.tiptop = tiptop;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.aditional_linear;
      LinearLayout aditionalLinear = ViewBindings.findChildViewById(rootView, id);
      if (aditionalLinear == null) {
        break missingId;
      }

      id = R.id.meal_linear;
      LinearLayout mealLinear = ViewBindings.findChildViewById(rootView, id);
      if (mealLinear == null) {
        break missingId;
      }

      id = R.id.prof_linear;
      LinearLayout profLinear = ViewBindings.findChildViewById(rootView, id);
      if (profLinear == null) {
        break missingId;
      }

      id = R.id.recycler_view;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.recycler_view_2;
      RecyclerView recyclerView2 = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView2 == null) {
        break missingId;
      }

      id = R.id.startzone;
      ImageView startzone = ViewBindings.findChildViewById(rootView, id);
      if (startzone == null) {
        break missingId;
      }

      id = R.id.tiptop;
      ConstraintLayout tiptop = ViewBindings.findChildViewById(rootView, id);
      if (tiptop == null) {
        break missingId;
      }

      return new FragmentHomeBinding((ConstraintLayout) rootView, aditionalLinear, mealLinear,
          profLinear, recyclerView, recyclerView2, startzone, tiptop);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
